[{
    "title":"About",
    "slug":"about",
    "publishedAt":"2014-02-12T15:00:00.000Z",
    "createdAt":"2012-12-20T00:00:00.000Z",
    "updatedAt":"2012-12-25T00:00:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "labels":["Getting Started"],
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "_authorId": "_1",
    "page": true
},{
    "title":"Welcome to Panda",
    "slug":"welcome-to-panda",
    "publishedAt":"2014-02-12T15:00:00.000Z",
    "createdAt":"2012-12-20T00:00:00.000Z",
    "updatedAt":"2012-12-25T01:01:11.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "labels":["Getting Started"],
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "_authorId": "_1",
    "featured": true,
    "commentsCount": 0
},{
    "title":"Lorem ipsum dolor sit amet",
    "slug":"lorem-ipsum-dolor-sit-amet",
    "publishedAt":"2014-02-10T21:22:19.000Z",
    "createdAt":"2013-12-10T00:00:00.000Z",
    "updatedAt":"2014-01-25T00:00:11.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["angularjs", "function"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"Cras eu eleifend nibh",
    "slug":"cras-eu-eleifend-nibh",
    "publishedAt":"2013-12-19T00:00:00.000Z",
    "createdAt":"2013-12-19T00:00:00.000Z",
    "updatedAt":"2014-01-20T00:01:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor</p>",
    "labels":[],
    "_authorId": "_2",
    "commentsCount": 0
},{
    "title":"Men of Tale",
    "slug":"men-of-tale",
    "publishedAt":"2014-01-10T00:00:00.000Z",
    "createdAt":"2014-01-10T00:00:00.000Z",
    "updatedAt":"2014-01-10T01:00:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor</p>",
    "labels":["node.js", "authentication", "jquery", "Windows Azure", "function"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"Lorem ipsum",
    "slug":"lorem-ipsum",
    "publishedAt":"2014-02-02T00:00:00.000Z",
    "createdAt":"2014-02-02T00:00:00.000Z",
    "updatedAt":"2014-02-05T00:12:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor</p>",
    "labels":["node.js","javascript"],
    "_authorId": "_2",
    "featured": true,
    "commentsCount": 0
},{
    "title":"The Spirits of the Heat",
    "slug":"spirits-of-heat",
    "publishedAt":"2014-02-02T00:00:00.000Z",
    "createdAt":"2014-02-02T00:00:00.000Z",
    "updatedAt":"2014-02-05T00:22:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",    "labels":["node.js","javascript"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Academy of the Body",
    "slug":"academy-of-body",
    "publishedAt":"2012-12-20T00:00:00.000Z",
    "createdAt":"2012-12-20T00:00:00.000Z",
    "updatedAt":"2012-12-25T00:00:00.000Z",
    "teaser":"You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;your blog URL&gt;/ghost/. When you arrive, you can select this post from a list",
    "labels":["Getting Started"],
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",    "_authorId": "_2",
    "commentsCount": 0
},{
    "title":"The Captive's Theft",
    "slug":"captives-theft",
    "publishedAt":"2013-12-10T00:00:00.000Z",
    "createdAt":"2013-12-10T00:00:00.000Z",
    "updatedAt":"2014-01-25T00:00:22.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor</p>",
    "labels":["angularjs", "function"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Rose of the Danger",
    "slug":"rose-of-danger",
    "publishedAt":"2013-12-19T00:00:00.000Z",
    "createdAt":"2013-12-19T00:00:00.000Z",
    "updatedAt":"2014-01-20T00:02:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor</p>",
    "labels":[],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"Butterfly of Luck",
    "slug":"butterfly-of-luck",
    "publishedAt":"2014-01-10T00:00:00.000Z",
    "createdAt":"2014-01-10T00:00:00.000Z",
    "updatedAt":"2014-01-10T02:00:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor</p>",
    "labels":["node.js", "authentication", "jquery", "Windows Azure", "function"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Women of the Bridge",
    "slug":"the-women-of-the-bridge",
    "publishedAt":"2014-02-02T00:00:00.000Z",
    "createdAt":"2014-02-02T00:00:00.000Z",
    "updatedAt":"2014-02-05T09:00:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["node.js","javascript"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"Night in the Snow",
    "slug":"night-in-the-snow",
    "publishedAt":"2014-02-02T00:00:00.000Z",
    "createdAt":"2014-02-02T00:00:00.000Z",
    "updatedAt":"2014-02-05T08:22:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["node.js","javascript"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"Wild Visions",
    "slug":"wild-visions",
    "publishedAt":"2013-12-19T00:00:00.000Z",
    "createdAt":"2013-12-19T00:00:00.000Z",
    "updatedAt":"2014-01-20T00:03:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":[],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Burning Winter",
    "slug":"burning-winter",
    "publishedAt":"2014-01-10T00:00:00.000Z",
    "createdAt":"2014-01-10T00:00:00.000Z",
    "updatedAt":"2014-01-10T03:00:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["node.js", "authentication", "jquery", "Windows Azure", "function"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Stone of the Voyager",
    "slug":"stone-of-voyager",
    "publishedAt":"2014-02-02T00:00:00.000Z",
    "createdAt":"2014-02-02T00:00:00.000Z",
    "updatedAt":"2014-02-05T00:11:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["node.js","javascript"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"Something in the Memory",
    "slug":"something-in-the-memory",
    "publishedAt":"2014-02-02T00:00:00.000Z",
    "createdAt":"2014-02-02T00:00:00.000Z",
    "updatedAt":"2014-02-05T00:09:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["node.js","javascript"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Servant of the Spark",
    "slug":"servant-of-spark",
    "publishedAt":"2012-12-20T00:00:00.000Z",
    "createdAt":"2012-12-20T00:00:00.000Z",
    "updatedAt":"2012-12-25T00:00:00.000Z",
    "teaser":"You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;your blog URL&gt;/ghost/. When you arrive, you can select this post from a list",
    "labels":["Getting Started"],
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",    
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"Moon in the Dream",
    "slug":"moon-in-the-dream",
    "publishedAt":"2013-12-10T00:00:00.000Z",
    "createdAt":"2013-12-10T00:00:00.000Z",
    "updatedAt":"2014-01-25T00:00:33.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["angularjs", "function"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"Worlds of Kiss",
    "slug":"worlds-of-kiss",
    "publishedAt":"2013-12-19T00:00:00.000Z",
    "createdAt":"2013-12-19T00:00:00.000Z",
    "updatedAt":"2014-01-20T00:04:00.000Z",
    "teaser":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "content":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",    
    "labels":[],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Rough Year",
    "slug":"the-rough-year",
    "publishedAt":"2014-01-10T00:00:00.000Z",
    "createdAt":"2014-01-10T00:00:00.000Z",
    "updatedAt":"2014-01-10T11:00:00.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content": "<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["node.js", "authentication", "jquery", "Windows Azure", "function"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Consort of the Flower",
    "slug":"the-consort-of-the-flower",
    "publishedAt":"2014-02-02T00:00:00.000Z",
    "createdAt":"2014-02-02T00:00:00.000Z",
    "updatedAt":"2014-02-05T00:00:10.000Z",
    "teaser":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam malesuada nec erat nec sagittis. Curabitur semper purus eget erat convallis, et mollis mauris dignissim. Suspendisse interdum arcu euismod, ullamcorper lectus eu, eleifend neque. Integer luctus dictum ipsum eget tempor.",
    "content": "<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["node.js","javascript"],
    "_authorId": "_1",
    "commentsCount": 0
},{
    "title":"The Bridges of the Crying",
    "slug":"the-bridges-of-the-crying",
    "publishedAt":"2014-02-02T00:00:00.000Z",
    "createdAt":"2014-02-02T00:00:00.000Z",
    "updatedAt":"2014-02-05T00:00:22.000Z",
    "teaser":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "content": "<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in this array.  </p>\n\n<h3 id=\"syntax\">Syntax</h3>\n\n<pre><code class=\"language-javascript\">arr.map(callback[, thisArg])  \n</code></pre>\n\n<p>Alternative  </p>\n\n<blockquote>\n  <p><code>arr.map(callback[, thisArg])</code></p>\n</blockquote>\n\n<h3 id=\"description\">Description</h3>\n\n<p><code>map</code> calls a provided <code>callback</code> functiononce for each element in an array, in order, and constructs a new array from the results. <code>callback</code> is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</p>\n\n<p><code>callback</code> is invoked with three arguments: thevalue of the element, the index of the element, and the Array object being traversed.</p>\n\n<p>If a <code>thisArg</code> parameter is provided to <code>map</code>, it will be passed to <code>callback</code> when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its <code>this</code> value. The <code>this</code> value ultimately observable by callback is determined according to <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this' >the usual rules for determining the this seen by a function</a>.</p>\n\n<p><code>map</code> does not mutate the array on which it is called (although callback, if invoked, maydo so).</p>\n\n<p>The range of elements processed by map is set before the first invocation of <code>callback</code>. Elements which are appended to the array after the call to map begins will not be visited by <code>callback</code>. If existing elements of the array are changed, or deleted, their value as passed to <code>callback</code> will be the value at the time map visits them; elements that are deleted are not visited.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.  </p>\n\n<pre><code class=\"language-javascript\">var numbers = [1, 4, 9];  \nvar roots = numbers.map(Math.sqrt);  \n/* roots is now [1, 2, 3], numbers is still [1, 4, 9] */\n</code></pre>\n\n<h3 id=\"exampleusingmapgenerically\">Example: using <code>map</code> generically</h3>\n\n<pre><code class=\"language-javascript\">[].map.call(document.querySelectorAll('select option:checked'), function(obj) {\n    console.log(obj.parentNode.id, obj.value);\n}\n</code></pre>\n\n<p>Sample page from <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map' >MDN</a></p>",
    "labels":["node.js","javascript"],
    "_authorId": "_2",
    "commentsCount": 0
}]